name: code-review-metrics

on:
  push:
    paths:
      - '.github/workflows/code-review-metrics.yml'
  pull_request:
    types: [opened]
  pull_request_review:
    types: [submitted]

concurrency:
  group: code-review-metrics
  cancel-in-progress: true

jobs: 
  code-review-metrics:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Find PR associated with current commit
        uses: jwalton/gh-find-current-pr@v1
        id: pr-finder

      - name: Count Reviews
        id: count-reviews
        uses: actions/github-script@v7
        with:
          script: |
            async function getFilteredPullRequests(owner, repo, startDate, endDate = null) {
              const { data: pullRequests } = await github.rest.pulls.list({
                owner,
                repo,
                state: 'all', // Fetch both open and closed pull requests
                per_page: 100,
                sort: 'created', // Sort by creation date
                direction: 'desc', // Newest first
              });

              // Filter pull requests opened or merged within the specified date range
              const filteredPullRequests = pullRequests.filter(pr => {
                const createdAt = new Date(pr.created_at);
                const mergedAt = pr.merged_at ? new Date(pr.merged_at) : null;
                const isAfterStartDate = createdAt >= startDate || (mergedAt && mergedAt >= startDate);
                const isBeforeEndDate = !endDate || (mergedAt && mergedAt <= endDate);
                return isAfterStartDate && isBeforeEndDate;
              });

              const filteredPRs = [];

              for (const pr of filteredPullRequests) {
                // Fetch reviews for each pull request
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner,
                  repo,
                  pull_number: pr.number,
                });

                // Sort reviews by submission date
                reviews.sort((a, b) => new Date(a.submitted_at) - new Date(b.submitted_at));

                // Check if the first review is approved or changes requested
                const firstReview = reviews[0];
                if (firstReview && (firstReview.state === 'APPROVED' || firstReview.state === 'CHANGES_REQUESTED')) {
                  filteredPRs.push({ pr, reviews: [firstReview] });
                }
              }

              return filteredPRs;
            }

            function calculateReviewDuration(pullRequests) {
              function countMedian(reviewDurations) {
                if (reviewDurations.length === 0) return 0;
                reviewDurations.sort((a, b) => a - b);
                const half = Math.floor(reviewDurations.length / 2);
                if (reviewDurations.length % 2) return reviewDurations[half];
                return (reviewDurations[half - 1] + reviewDurations[half]) / 2.0;
              }

              function countMean(reviewDurations) {
                if (reviewDurations.length === 0) return 0;
                const sum = reviewDurations.reduce((sum, duration) => sum + duration, 0);
                return sum / reviewDurations.length;
              }

              const mergeTimes = pullRequests
                .filter(({ pr }) => pr.merged_at)
                .map(({ pr }) => {
                  const openDate = new Date(pr.created_at);
                  const mergeDate = new Date(pr.merged_at);
                  return mergeDate - openDate;
                });
              
              const reviewTimes = pullRequests
                .map(({ pr, reviews }) => {
                  const openDate = new Date(pr.created_at);
                  const reviewDate = new Date(reviews[0].submitted_at);
                  return reviewDate - openDate;
                });

              return { 
                mergeTime: [countMedian(mergeTimes), countMean(mergeTimes)], 
                reviewTime: [countMedian(reviewTimes), countMean(reviewTimes)] 
              };
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const startDate = new Date(Date.parse(process.env.startDate));
            const endDate = new Date(Date.parse(process.env.endDate));

            const filteredPRs = await getFilteredPullRequests(owner, repo, startDate, endDate);

            const { mergeTime, reviewTime } = calculateReviewDuration(filteredPRs);

            core.setOutput('prCount', filteredPRs.length);
            core.setOutput('medianReviewDuration', reviewTime[0]);
            core.setOutput('meanReviewDuration', reviewTime[1]);
            core.setOutput('medianMergeDuration', mergeTime[0]);
            core.setOutput('meanMergeDuration', mergeTime[1]);
        env:
          startDate: 2021-04-01
          endDate: 2024-10-24

      - name: Generate Comment
        id: generate-comment
        uses: actions/github-script@v7
        with:
          script: |
            const prCount = process.env.prCount;
            const medianReviewDuration = process.env.medianReviewDuration;
            const meanReviewDuration = process.env.meanReviewDuration;
            const medianMergeDuration = process.env.medianMergeDuration;
            const meanMergeDuration = process.env.meanMergeDuration;

            const lastTargetDayDate = new Date(process.env.lastTargetDay);
            const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            const dayName = dayNames[lastTargetDayDate.getUTCDay()];
            const hour = lastTargetDayDate.getUTCHours();
            const minutes = lastTargetDayDate.getUTCMinutes().toString().padStart(2, '0'); // Ensure two-digit format

            function formatDuration(durationInMilliseconds) {
              const totalMinutes = Math.round(durationInMilliseconds / (1000 * 60)); // Convert ms to minutes
              const days = Math.floor(totalMinutes / (24 * 60));
              const hours = Math.floor((totalMinutes % (24 * 60)) / 60);
              const minutes = totalMinutes % 60;

              return `${days > 0 ? `${days} days ` : ''}${hours > 0 || days > 0 ? `${hours} hours ` : ''}${minutes} minutes`;
            }

            const formattedMedianReviewDuration = formatDuration(medianReviewDuration);
            const formattedMeanReviewDuration = formatDuration(meanReviewDuration);
            const formattedMedianMergeDuration = formatDuration(medianMergeDuration);
            const formattedMeanMergeDuration = formatDuration(meanMergeDuration);

            let comment = `### Code Review Highlights from ${prCount} PRs (from to )\n\n`;
            comment += `Time to review Pull Request:  **${formattedMedianReviewDuration}** (Median), **${formattedMeanReviewDuration}** (Mean)\n`;
            comment += `Time to merge Pull Request:  **${formattedMedianMergeDuration}** (Median), **${formattedMeanMergeDuration}** (Mean)\n`;

            core.setOutput('comment', comment);
        env:
          prCount: ${{ steps.count-reviews.outputs.prCount }}
          medianReviewDuration: ${{ steps.count-reviews.outputs.medianReviewDuration }}
          meanReviewDuration: ${{ steps.count-reviews.outputs.meanReviewDuration }}
          medianMergeDuration: ${{ steps.count-reviews.outputs.medianMergeDuration }}
          meanMergeDuration: ${{ steps.count-reviews.outputs.meanMergeDuration }}
          lastTargetDay: ${{ steps.calculate-target-day.outputs.lastTargetDay }}

      - name: Post Review Summary Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: code-review-summary
          number: ${{ steps.pr-finder.outputs.pr }}
          message: ${{ steps.generate-comment.outputs.comment }}
